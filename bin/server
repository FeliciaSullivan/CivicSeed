#!/usr/bin/env node

var rootDir = process.cwd(),
ss = require('socketstream'),
express = require('express'),
app = module.exports = express(),
config = require(rootDir + '/config'),
domain = config.get('DOMAIN'),
port = config.get('PORT'),
nodeEnv = config.get('ENVIRONMENT'),
flash = require('connect-flash'),
passport = require('passport'),
service = require(rootDir + '/service'),
controllers = require(rootDir + '/controllers'),
server,
redisConfig;

console.log('\n\n < < < = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = > > > '.green);
console.log(' < < < = = = = = = = = = = = =   Starting the Civic Seed Game Engine   = = = = = = = = = = = = > > > '.green.inverse);
console.log(' < < < = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = > > > '.green);

// Setup database services, based on the config
service.connectMongoose(app, function(databases) {

	// ~ - ~ - ~ - ~ - ~ - ~ - ~ - ~ - ~ - ~ - ~ - ~ --- >>>
	// ~ - ~ - ~ - ~ - ~ - ~ - ~ - ~ - ~ - ~ - ~ - ~ --- >>> EXPRESS
	// ~ - ~ - ~ - ~ - ~ - ~ - ~ - ~ - ~ - ~ - ~ - ~ --- >>>

	console.log('   * * * * * * * * * * * *   Configuring Express   * * * * * * * * * * * *   '.yellow);

	app.set('views', rootDir + '/client/views');
	app.set('view engine', 'hbs');
	service.useModule('middleware/hbs-helpers').init();

	// app.set('view engine', 'html');
	// app.engine('html', require('hbs').__express);
	app.use(express.logger(':method :url :status'));
	app.use(express.bodyParser());
	app.use(express.methodOverride());
	app.use(app.router); 
	// app.use(express.cookieParser());
	// app.use(express.session({secret: 'secret'}));
	// app.use(express.compiler({src: __dirname + '/wwwroot', enable: ['stylus']}));
	app.use(flash());
	app.use(passport.initialize());
	app.use(passport.session());

	// var expressMiddleware = {
	// 	account: require(rootDir + '/server/middleware/account'),
	// };

	// // var temply1 = expressMiddleware.account.authenticated;
	// // var temply2 = expressMiddleware.account.authenticated();
	// // console.log(temply1, temply2);
	// app.use(expressMiddleware.account.authenticated('express'));

	// app.use(function(req, res, next){
	//   console.log('%s %s', req.method, req.url);
	//   next();
	// });

	// ~ - ~ - ~ - ~ - ~ - ~ - ~ - ~ - ~ - ~ - ~ - ~ --- >>>
	// ~ - ~ - ~ - ~ - ~ - ~ - ~ - ~ - ~ - ~ - ~ - ~ --- >>> SOCKET STREAM
	// ~ - ~ - ~ - ~ - ~ - ~ - ~ - ~ - ~ - ~ - ~ - ~ --- >>>

	console.log('   * * * * * * * * * * * *   Configuring SocketStream   * * * * * * * * * * * *   '.yellow);

	// Code Formatters
	ss.client.formatters.add(require('ss-stylus'));

	// Server-side compiled templates for client
	ss.client.templateEngine.use(require('ss-hogan'));

	// using engine.io for web sockets transport
	ss.ws.transport.use(require('ss-engine.io'), {
		client: {
			host: 'localhost',
			port: port
		}
	});

	// use redis
	if(config.get('USE_REDIS')) {
		redisConfig = {
			host: config.get('REDIS_HOST'),
			port: config.get('REDIS_PORT'),
			pass: config.get('REDIS_PW'),
			db: config.get('REDIS_DB')
		};
		ss.session.store.use('redis', redisConfig);
		ss.publish.transport.use('redis', redisConfig);
		ss.session.options.maxAge = 1261440000000; // forty years
	}

	// make the models accessible to Socket Stream
	ss.api.add('service', service);

	// connect mongoose to ss internal API
	ss.api.add('db', databases.mongooseDb);

	if(nodeEnv === 'development') {
		app.use(express.errorHandler({ dumpExceptions: true, showStack: true }));
	}

	if(nodeEnv === 'testing' || nodeEnv === 'production') {
		// ss.client.packAssets();
		// var oneYear = 31557600000;
		// app.use(express.static(__dirname + '/public', { maxAge: oneYear }));
		// app.use(express.errorHandler());
	}

	controllers.loadAll(app, service, function() {

		// ss.client.packAssets();

		// ~ - ~ - ~ - ~ - ~ - ~ - ~ - ~ - ~ - ~ - ~ - ~ --- >>>
		// ~ - ~ - ~ - ~ - ~ - ~ - ~ - ~ - ~ - ~ - ~ - ~ --- >>> START THE APP
		// ~ - ~ - ~ - ~ - ~ - ~ - ~ - ~ - ~ - ~ - ~ - ~ --- >>>

		server = app.listen(port, function() {

			var local = server.address();
			console.log('   * * * * * * * * * * * *   Express server listening @ http://%s:%d/ in ' + '%s'.yellow.inverse + ' mode\n\n', local.address, local.port, app.settings.env);

			// Start SocketStream
			ss.start(server);

			// Append SocketStream middleware to the stack
			app.stack = ss.http.middleware.stack.concat(app.stack);

		});

	});

});